/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package simulprodata.view.frames;

import java.awt.HeadlessException;
import java.io.File;
import java.io.IOException;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.jdom2.JDOMException;
import simulprodata.controller.ViewRadioButtonListener;
import simulprodata.model.Control;
import simulprodata.model.util.Notifier;
import simulprodata.model.util.chart.FactoryChartPanel;
import simulprodata.model.util.chart.FactoryData;
import simulprodata.model.util.chart.Parameter;
import simulprodata.model.util.excel.CreateSheetExcel;
import simulprodata.model.util.xml.FactoryXML;
import simulprodata.view.panels.ConstantPanelView;
import simulprodata.view.panels.PanelViewChart;
import simulprodata.view.panels.PanelViewTime;
import simulprodata.view.panels.PanelViewWithCategoria;


/**
 *
 * @author Ariel Arnedo
 */
public class MainFrame extends javax.swing.JFrame implements ConstantPanelView{

    private final static Control CONTROL = new Control();
    
    
    public MainFrame() {
        super("SimulProData");
        initComponents();
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupView = new javax.swing.ButtonGroup();
        panelWork = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        itemMenuCargar = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuExport = new javax.swing.JMenu();
        itemExportToXML = new javax.swing.JMenuItem();
        menuImport = new javax.swing.JMenu();
        itemImportXML = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        itemPersonTiempo = new javax.swing.JCheckBoxMenuItem();
        itemPersonCategoria = new javax.swing.JCheckBoxMenuItem();
        jMenu4 = new javax.swing.JMenu();
        itemChartTimeArrivals = new javax.swing.JMenuItem();
        itemChartTimeIntervals = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        itemGeneraExcel = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(245,245,245));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        panelWork.setLayout(new java.awt.BorderLayout());
        CONTROL.setPanelWork(panelWork);

        jMenu1.setText("File");

        itemMenuCargar.setText("Cargar Lista de Categorias");
        itemMenuCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuCargarActionPerformed(evt);
            }
        });
        jMenu1.add(itemMenuCargar);
        jMenu1.add(jSeparator1);

        menuExport.setText("Exportar");

        itemExportToXML.setText("A Formato XML");
        itemExportToXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemExportToXMLActionPerformed(evt);
            }
        });
        menuExport.add(itemExportToXML);

        jMenu1.add(menuExport);

        menuImport.setText("Importar");

        itemImportXML.setText("En Formato XML");
        itemImportXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemImportXMLActionPerformed(evt);
            }
        });
        menuImport.add(itemImportXML);

        jMenu1.add(menuImport);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("View");

        buttonGroupView.add(itemPersonTiempo);
        itemPersonTiempo.setSelected(true);
        itemPersonTiempo.setText("Personas con sus Tiempos");
        itemPersonTiempo.addItemListener(new ViewRadioButtonListener(CONTROL));
        jMenu2.add(itemPersonTiempo);

        buttonGroupView.add(itemPersonCategoria);
        itemPersonCategoria.setText("Personas con sus Categorias");
        itemPersonCategoria.addItemListener(new ViewRadioButtonListener(CONTROL));
        jMenu2.add(itemPersonCategoria);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Charts");

        itemChartTimeArrivals.setText("Grafica de Tiempos entre Llegadas ");
        itemChartTimeArrivals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemChartTimeArrivalsActionPerformed(evt);
            }
        });
        jMenu4.add(itemChartTimeArrivals);

        itemChartTimeIntervals.setText("Grafica de Tiempos entre Llegadas por Intervalos");
        itemChartTimeIntervals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemChartTimeIntervalsActionPerformed(evt);
            }
        });
        jMenu4.add(itemChartTimeIntervals);

        jMenuBar1.add(jMenu4);

        jMenu3.setText("Tool");

        itemGeneraExcel.setText("Generar Excel");
        itemGeneraExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemGeneraExcelActionPerformed(evt);
            }
        });
        jMenu3.add(itemGeneraExcel);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(panelWork, javax.swing.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(panelWork, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        CONTROL.addPanelView(PANEL_VIEW_PERSON_WITH_TIME, new PanelViewTime(CONTROL));
        CONTROL.addPanelView(PANEL_VIEW_PERSON_WITH_CATEGORY, new PanelViewWithCategoria(CONTROL));
        CONTROL.changeViewPanel(PANEL_VIEW_PERSON_WITH_TIME);
    }//GEN-LAST:event_formWindowOpened

    private void itemMenuCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuCargarActionPerformed
        Runnable run = () -> {
            javax.swing.JFileChooser fileChooser = new JFileChooser();
            fileChooser.setMultiSelectionEnabled(false);
            fileChooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);
            fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Categorias", "txt"));
            if(fileChooser.showOpenDialog(MainFrame.this) == javax.swing.JFileChooser.APPROVE_OPTION){
                try {
                    if(CONTROL.incluirCategoria(FactoryXML.processCategory(fileChooser.getSelectedFile()))){
                        JOptionPane.showMessageDialog(MainFrame.this, "Categorias Cargadas","Resultado",
                        JOptionPane.INFORMATION_MESSAGE);
                    }else{
                        JOptionPane.showMessageDialog(MainFrame.this, "Se presenta incosistencias entre el tamaÃ±o\nde lista de categorias y la lista de personas","!Advertencia!",
                        JOptionPane.WARNING_MESSAGE);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
//                System.out.println(fileChooser.getSelectedFile());
            }
        };
        new Thread(run).start();
    }//GEN-LAST:event_itemMenuCargarActionPerformed

    private void itemImportXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemImportXMLActionPerformed
        Runnable run = () -> {
          JFileChooser fileChooser = new JFileChooser();
          fileChooser.setMultiSelectionEnabled(false);
          fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
          fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Archivo XML", "xml"));
          
          if(fileChooser.showOpenDialog(MainFrame.this) == JFileChooser.APPROVE_OPTION){
              try {
                  CONTROL.getPersonasProcesadas().addAll(FactoryXML.cargarListPerson(fileChooser.getSelectedFile()));
                  Notifier.getNotificador().notificar("Update");
                  JOptionPane.showMessageDialog(rootPane, "Las listas de personas fueron cargadas","Operacion Exitosa",JOptionPane.INFORMATION_MESSAGE);
//            } catch (Exception ex) {  
              } catch (JDOMException | IOException | HeadlessException ex) {
                  JOptionPane.showMessageDialog(rootPane, ex.getMessage());
                  Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
              }
          }
        };
        new Thread(run).start();
    }//GEN-LAST:event_itemImportXMLActionPerformed

    private void itemExportToXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemExportToXMLActionPerformed
        if(CONTROL.getPersonasProcesadas().isEmpty()){
            JOptionPane.showMessageDialog(MainFrame.this, "Aun no hay registros de personas","!Advertencia!",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if(!CONTROL.getColaDeAtencion().isEmpty() || !CONTROL.getColaDeCaja().isEmpty()){
            JOptionPane.showMessageDialog(MainFrame.this, "No se puede generar ningun informe hasta que no halla\nninguna persona en cola en caja o en atencion","!Advertencia!",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        Runnable run = () -> {
            javax.swing.JFileChooser fileChooser = new JFileChooser();
            fileChooser.setMultiSelectionEnabled(false);
            fileChooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);
            fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Formato XML", "xml"));
            if(fileChooser.showSaveDialog(MainFrame.this) == javax.swing.JFileChooser.APPROVE_OPTION){
                System.out.println(new File(fileChooser.getCurrentDirectory(), fileChooser.getName(fileChooser.getSelectedFile()))+".xml");
                try{
                    FactoryXML.createOuputXML(CONTROL.getPersonasProcesadas(), new File(fileChooser.getCurrentDirectory(), fileChooser.getName(fileChooser.getSelectedFile())+".xml"));
                    JOptionPane.showMessageDialog(MainFrame.this, "Formato XML Generado");
                }catch(Exception ex){
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(MainFrame.this,ex.getMessage());
                }
            }
        };
        new Thread(run).start();
    }//GEN-LAST:event_itemExportToXMLActionPerformed

    private void itemGeneraExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemGeneraExcelActionPerformed
        if(CONTROL.getPersonasProcesadas().isEmpty()){
            JOptionPane.showMessageDialog(MainFrame.this, "Aun no hay registros de personas","!Advertencia!",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if(!CONTROL.getColaDeAtencion().isEmpty() || !CONTROL.getColaDeCaja().isEmpty()){
            JOptionPane.showMessageDialog(MainFrame.this, "No se puede generar ningun informe hasta que no halla\nninguna persona en cola en caja o en atencion","!Advertencia!",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        Runnable run;
        run = () -> {
            javax.swing.JFileChooser fileChooser = new JFileChooser();
            fileChooser.setMultiSelectionEnabled(false);
            fileChooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);
            fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Formato Excel", "xls"));
            if(fileChooser.showSaveDialog(MainFrame.this) == javax.swing.JFileChooser.APPROVE_OPTION){
                System.out.println(new File(fileChooser.getCurrentDirectory(), fileChooser.getName(fileChooser.getSelectedFile()))+".xml");
                try{
                    CreateSheetExcel.createExcel(CONTROL.getPersonasProcesadas(), new File(fileChooser.getCurrentDirectory(), fileChooser.getName(fileChooser.getSelectedFile())+".xls"));
                    JOptionPane.showMessageDialog(MainFrame.this, "Formato XML Generado");
                }catch(Exception ex){
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(MainFrame.this,ex.getMessage());
                }
            }
        };
        new Thread(run).start();
    }//GEN-LAST:event_itemGeneraExcelActionPerformed

    private void itemChartTimeArrivalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemChartTimeArrivalsActionPerformed
        Runnable run = () ->{
            CONTROL.changeViewPanel(FactoryChartPanel.createCharPanel(CONTROL.getPersonasProcesadas(), Parameter.TIMES_BETWEEN_ARRIVALS));
            buttonGroupView.clearSelection();
        };
        new Thread(run).start();
    }//GEN-LAST:event_itemChartTimeArrivalsActionPerformed

    private void itemChartTimeIntervalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemChartTimeIntervalsActionPerformed
        Runnable run = () ->{
            CONTROL.changeViewPanel(new PanelViewChart(CONTROL));
            buttonGroupView.clearSelection();
        };
        new Thread(run).start();
    }//GEN-LAST:event_itemChartTimeIntervalsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupView;
    private javax.swing.JMenuItem itemChartTimeArrivals;
    private javax.swing.JMenuItem itemChartTimeIntervals;
    private javax.swing.JMenuItem itemExportToXML;
    private javax.swing.JMenuItem itemGeneraExcel;
    private javax.swing.JMenuItem itemImportXML;
    private javax.swing.JMenuItem itemMenuCargar;
    private javax.swing.JCheckBoxMenuItem itemPersonCategoria;
    private javax.swing.JCheckBoxMenuItem itemPersonTiempo;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenu menuExport;
    private javax.swing.JMenu menuImport;
    private javax.swing.JPanel panelWork;
    // End of variables declaration//GEN-END:variables
//    if(CONTROL.getPersonasProcesadas().isEmpty()){
//            JOptionPane.showMessageDialog(MainFrame.this, "Aun no hay registros de personas","!Advertencia!",
//                    JOptionPane.WARNING_MESSAGE);
//            return;
//        }
//        
//        if(!CONTROL.getColaDeAtencion().isEmpty() || !CONTROL.getColaDeCaja().isEmpty()){
//            JOptionPane.showMessageDialog(MainFrame.this, "No se puede generar ningun informe hasta que no halla\nninguna persona en cola en caja o en atencion","!Advertencia!",
//                    JOptionPane.WARNING_MESSAGE);
//            return;
//        }
//        if(CreateSheetExcel.createExcel(CONTROL.getPersonasProcesadas(), false)){
//            JOptionPane.showMessageDialog(MainFrame.this, "Excel Generado");
//        }else{
//            JOptionPane.showMessageDialog(MainFrame.this, "Excel NO Generado");
//        }
}
